# pushin-p web server

A simple web server designed for CS 130.

## How the source code is laid out

Our source code repository is laid out like the following:

```
pushin-p
├── CMakeLists.txt
├── cmake/
├── configs/
├── docker/
├── include/
    ├── factories/
    ├── file_system/
    └── request_handlers/
├── src/
    ├── factories/
    ├── file_system/
    └── request_handlers/
├── static/
└── tests/
    ├── integration_tests/
    ├── static_files/
    └── test_configs/
```

The CMakeLists.txt file contains information used to generate a makefile to build and link
our source code and tests. The cmake/ directory contains configs used in this process, for
example our code coverage config.

The configs/ directory contains webserver config files that contain information like port
and route mappings. These files are parsed on webserver startup.

The docker/ directory contains various config files used to generate Docker containers for
our project. There is currently a container for our webserver and for our coverage test.

The include/ directory contains header files for various classes and interfaces used in our
webserver. For organizational purposes, there are subdirectories for the factories,
filesystem, and request handlers. These header files are implemented in the src/ directory.
This includes server, session, config parser, and logger classes, as well as the factories,
filesystem, and request handlers in the corresponding subdirectories.

Our top level class is server_main.cc. It takes a webserver config file as an argument and
uses the config_parser class to extract the relevant information. This info is used to
create a list of route mappings and instantiate a server instance, which opens a new session
for each client.

The static/ directory contains static files that are served by our webserver's static
request handler, if one is specified.

The tests/ directory contains various unit and integration tests. This directory also
includes various static files used to perform these tests.

## How to build, test, and run the code

To build the code, follow the following commands from the root directory of the project

```
mkdir build
cd build
cmake ..
make
```

To run the tests, run these commands from the build folder:

```
make test
```

To check the test coverage, run these commands from the build folder:

```
cmake -DCMAKE_BUILD_TYPE=Coverage ..
make coverage
```

The test coverage data should be present in the output of the make command. You can view the detailed information on test coverage inside build/report/index.html.

To run the code (after it's already been built), run these commands from the build folder:

```
bin/server ../configs/server_config
```

## How to add a request handler
We design the generic request handler with a simple constructor that defines the location & path and a serve function that is pure virtual as it will be implemented separately by each type of request handlers.
```
struct status {
    bool success;
    std::string err;
};

class request_handler {
public:
    request_handler(std::string location, std::string url);
    virtual status serve(char* req_data, size_t bytes_transferred, http::response<http::buffer_body> &res) = 0;
protected:
    std::string location_;
    std::string url_;
private:
    friend class RequestHandlerTest;
    friend class RequestHandlerFactoryTest;
};
```

To add a new request handler, we can inherit the new class from request_handler. Then, we will need to implement the serve function to process the request.

Example:
```
class error_request_handler: public request_handler
{
    friend class RequestHandlerTest;
    public:
        error_request_handler(std::string location, std::string url);
        status serve(char* req_data, size_t bytes_transferred, http::response<http::buffer_body> &res);
        const std::string HTML = ".html";
};
```

Serve can be implemented many different ways. For example:
```
status error_request_handler::serve(char* req_data, size_t bytes_transferred, http::response<http::buffer_body> &res)
{
    Logger::logInfo("Serving 404 Error Page");
    std::string page_404_path = "../static/404_error.html";

    int length = 0;
    char* buffer;

    std::ifstream file(page_404_path);

    file.seekg(0, file.end);
    length = file.tellg();
    file.seekg(0, file.beg);
    buffer = new char[length];
    file.read(buffer, length);

    file.close();

    std::string extension;
    extension = error_request_handler::HTML;

    res.result(http::status::not_found);
    res.set(http::field::content_type, "text/html");
    res.body().data = buffer;
    res.body().size = length;

    Logger::logInfo("error_request_handler - serve - success");
    return {true, ""};
}
```

Make sure to return Status, an interface of a boolean, which defines if the request handler succeeded or not, and an error message. 

Each personalized request handler is wrapped around a request handler factory, which generates the request handler.
For example:
```
class error_request_handler_factory: public request_handler_factory
{
    friend class RequestHandlerFactoryTest;
    public:
        request_handler* create(std::string location, std::string url);
};
```

The create function just dynamically allocates an instance of the request handler, hence the name request handler factory.
An example of its implementation is:
```
request_handler* error_request_handler_factory::create(
    std::string location, std::string url) 
{
    return new error_request_handler(location, url);
}
```